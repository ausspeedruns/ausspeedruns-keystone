
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('./runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.3.1
 * Query Engine version: c875e43600dfe042452e0b868f7a48b817b9640b
 */
Prisma.prismaVersion = {
  client: "4.3.1",
  engine: "c875e43600dfe042452e0b868f7a48b817b9640b"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.EventScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  shortname: 'shortname',
  published: 'published',
  acceptingSubmissions: 'acceptingSubmissions',
  acceptingTickets: 'acceptingTickets',
  scheduleReleased: 'scheduleReleased',
  acceptingVolunteers: 'acceptingVolunteers',
  acceptingBackups: 'acceptingBackups',
  acceptingShirts: 'acceptingShirts',
  eventTimezone: 'eventTimezone',
  startDate: 'startDate',
  endDate: 'endDate',
  raised: 'raised',
  postEventPage: 'postEventPage',
  logo_filesize: 'logo_filesize',
  logo_extension: 'logo_extension',
  logo_width: 'logo_width',
  logo_height: 'logo_height',
  logo_id: 'logo_id',
  darkModeLogo_filesize: 'darkModeLogo_filesize',
  darkModeLogo_extension: 'darkModeLogo_extension',
  darkModeLogo_width: 'darkModeLogo_width',
  darkModeLogo_height: 'darkModeLogo_height',
  darkModeLogo_id: 'darkModeLogo_id',
  heroImage_filesize: 'heroImage_filesize',
  heroImage_extension: 'heroImage_extension',
  heroImage_width: 'heroImage_width',
  heroImage_height: 'heroImage_height',
  heroImage_id: 'heroImage_id',
  ogImage_filesize: 'ogImage_filesize',
  ogImage_extension: 'ogImage_extension',
  ogImage_width: 'ogImage_width',
  ogImage_height: 'ogImage_height',
  ogImage_id: 'ogImage_id',
  postEventBackground_filesize: 'postEventBackground_filesize',
  postEventBackground_extension: 'postEventBackground_extension',
  postEventBackground_width: 'postEventBackground_width',
  postEventBackground_height: 'postEventBackground_height',
  postEventBackground_id: 'postEventBackground_id',
  pressKit_filename: 'pressKit_filename',
  pressKit_filesize: 'pressKit_filesize',
  submissionInstructions: 'submissionInstructions',
  eventPage: 'eventPage'
});

exports.Prisma.IncentiveScalarFieldEnum = makeEnum({
  id: 'id',
  runId: 'runId',
  eventId: 'eventId',
  title: 'title',
  notes: 'notes',
  type: 'type',
  data: 'data',
  active: 'active'
});

exports.Prisma.JsonNullValueFilter = makeEnum({
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
});

exports.Prisma.JsonNullValueInput = makeEnum({
  JsonNull: Prisma.JsonNull
});

exports.Prisma.NullableJsonNullValueInput = makeEnum({
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
});

exports.Prisma.PostScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  slug: 'slug',
  published: 'published',
  publishedDate: 'publishedDate',
  editedDate: 'editedDate',
  role: 'role',
  content: 'content',
  intro: 'intro',
  eventId: 'eventId'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.RoleScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  admin: 'admin',
  canManageContent: 'canManageContent',
  canManageUsers: 'canManageUsers',
  runner: 'runner',
  volunteer: 'volunteer',
  eventId: 'eventId',
  show: 'show',
  colour: 'colour',
  textColour: 'textColour'
});

exports.Prisma.RunScalarFieldEnum = makeEnum({
  id: 'id',
  originalSubmissionId: 'originalSubmissionId',
  game: 'game',
  category: 'category',
  platform: 'platform',
  estimate: 'estimate',
  finalTime: 'finalTime',
  donationIncentive: 'donationIncentive',
  race: 'race',
  racer: 'racer',
  coop: 'coop',
  twitchVOD: 'twitchVOD',
  youtubeVOD: 'youtubeVOD',
  eventId: 'eventId',
  scheduledTime: 'scheduledTime'
});

exports.Prisma.ShirtOrderScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  taken: 'taken',
  method: 'method',
  shirtID: 'shirtID',
  paid: 'paid',
  notes: 'notes',
  size: 'size',
  colour: 'colour',
  stripeID: 'stripeID',
  created: 'created'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.SubmissionScalarFieldEnum = makeEnum({
  id: 'id',
  runnerId: 'runnerId',
  created: 'created',
  game: 'game',
  category: 'category',
  platform: 'platform',
  estimate: 'estimate',
  ageRating: 'ageRating',
  donationIncentive: 'donationIncentive',
  specialReqs: 'specialReqs',
  availability: 'availability',
  race: 'race',
  racer: 'racer',
  coop: 'coop',
  video: 'video',
  status: 'status',
  eventId: 'eventId',
  willingBackup: 'willingBackup'
});

exports.Prisma.TicketScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  eventId: 'eventId',
  taken: 'taken',
  method: 'method',
  ticketID: 'ticketID',
  paid: 'paid',
  notes: 'notes',
  numberOfTickets: 'numberOfTickets',
  stripeID: 'stripeID',
  created: 'created'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  username: 'username',
  email: 'email',
  password: 'password',
  accountCreated: 'accountCreated',
  dateOfBirth: 'dateOfBirth',
  pronouns: 'pronouns',
  verified: 'verified',
  state: 'state',
  sentVerification: 'sentVerification',
  discord: 'discord',
  twitter: 'twitter',
  twitch: 'twitch',
  passwordResetToken: 'passwordResetToken',
  passwordResetIssuedAt: 'passwordResetIssuedAt',
  passwordResetRedeemedAt: 'passwordResetRedeemedAt'
});

exports.Prisma.VerificationScalarFieldEnum = makeEnum({
  id: 'id',
  code: 'code',
  account: 'account'
});

exports.Prisma.VolunteerScalarFieldEnum = makeEnum({
  id: 'id',
  volunteerId: 'volunteerId',
  jobType: 'jobType',
  eventHostTime: 'eventHostTime',
  maxDailyHostTime: 'maxDailyHostTime',
  dayTimes: 'dayTimes',
  specificGame: 'specificGame',
  specificRunner: 'specificRunner',
  additionalInfo: 'additionalInfo',
  experience: 'experience',
  favMeme: 'favMeme',
  runnerManagementAvailability: 'runnerManagementAvailability',
  techAvailablity: 'techAvailablity',
  techExperience: 'techExperience',
  eventId: 'eventId'
});
exports.PostRoleType = makeEnum({
  public: 'public',
  runner: 'runner',
  staff: 'staff'
});

exports.RoleTextColourType = makeEnum({
  white: 'white',
  black: 'black'
});

exports.ShirtOrderColourType = makeEnum({
  blue: 'blue',
  purple: 'purple'
});

exports.ShirtOrderMethodType = makeEnum({
  bank: 'bank',
  stripe: 'stripe'
});

exports.ShirtOrderSizeType = makeEnum({
  xs: 'xs',
  s: 's',
  m: 'm',
  l: 'l',
  xl: 'xl',
  xl2: 'xl2',
  xl3: 'xl3'
});

exports.SubmissionAgeRatingType = makeEnum({
  m_or_lower: 'm_or_lower',
  ma15: 'ma15',
  ra18: 'ra18'
});

exports.SubmissionRaceType = makeEnum({
  no: 'no',
  solo: 'solo',
  only: 'only'
});

exports.SubmissionStatusType = makeEnum({
  submitted: 'submitted',
  accepted: 'accepted',
  backup: 'backup',
  rejected: 'rejected'
});

exports.TicketMethodType = makeEnum({
  bank: 'bank',
  stripe: 'stripe'
});

exports.UserStateType = makeEnum({
  none: 'none',
  vic: 'vic',
  nsw: 'nsw',
  qld: 'qld',
  sa: 'sa',
  wa: 'wa',
  act: 'act',
  nt: 'nt',
  tas: 'tas',
  outer: 'outer'
});

exports.VolunteerJobTypeType = makeEnum({
  host: 'host',
  social: 'social',
  runMgmt: 'runMgmt',
  tech: 'tech'
});

exports.Prisma.ModelName = makeEnum({
  Post: 'Post',
  User: 'User',
  Submission: 'Submission',
  Event: 'Event',
  Role: 'Role',
  Run: 'Run',
  Verification: 'Verification',
  Ticket: 'Ticket',
  Volunteer: 'Volunteer',
  ShirtOrder: 'ShirtOrder',
  Incentive: 'Incentive'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)

# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Post {
  id: ID!
  title: String
  slug: String
  author(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  authorCount(where: UserWhereInput! = {}): Int
  published: Boolean
  role: PostRoleType
  content: Post_content_Document
}

enum PostRoleType {
  public
  runner
  tech
  runnermanagement
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
  slug: String
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  author: UserManyRelationFilter
  published: BooleanFilter
  role: PostRoleTypeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input PostRoleTypeNullableFilter {
  equals: PostRoleType
  in: [PostRoleType!]
  notIn: [PostRoleType!]
  not: PostRoleTypeNullableFilter
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  published: OrderDirection
  role: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input PostUpdateInput {
  title: String
  slug: String
  author: UserRelateToManyForUpdateInput
  published: Boolean
  role: PostRoleType
  content: JSON
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  slug: String
  author: UserRelateToManyForCreateInput
  published: Boolean
  role: PostRoleType
  content: JSON
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type User {
  id: ID!
  name: String
  username: String
  email: String
  password: PasswordState
  accountCreated: DateTime
  isOver18: Boolean
  pronouns: String
  eventsAttended: String
  discord: String
  twitter: String
  submissions(
    where: SubmissionWhereInput! = {}
    orderBy: [SubmissionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Submission!]
  submissionsCount(where: SubmissionWhereInput! = {}): Int
  roleRunner: Boolean
  roleTech: Boolean
  roleRunnerManagement: Boolean
  roleAdmin: Boolean
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  username: StringFilter
  email: StringFilter
  accountCreated: DateTimeNullableFilter
  isOver18: BooleanFilter
  pronouns: StringFilter
  eventsAttended: StringFilter
  discord: StringFilter
  twitter: StringFilter
  submissions: SubmissionManyRelationFilter
  roleRunner: BooleanFilter
  roleTech: BooleanFilter
  roleRunnerManagement: BooleanFilter
  roleAdmin: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input SubmissionManyRelationFilter {
  every: SubmissionWhereInput
  some: SubmissionWhereInput
  none: SubmissionWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  username: OrderDirection
  email: OrderDirection
  accountCreated: OrderDirection
  isOver18: OrderDirection
  pronouns: OrderDirection
  eventsAttended: OrderDirection
  discord: OrderDirection
  twitter: OrderDirection
  roleRunner: OrderDirection
  roleTech: OrderDirection
  roleRunnerManagement: OrderDirection
  roleAdmin: OrderDirection
}

input UserUpdateInput {
  name: String
  username: String
  email: String
  password: String
  accountCreated: DateTime
  isOver18: Boolean
  pronouns: String
  eventsAttended: String
  discord: String
  twitter: String
  submissions: SubmissionRelateToManyForUpdateInput
  roleRunner: Boolean
  roleTech: Boolean
  roleRunnerManagement: Boolean
  roleAdmin: Boolean
}

input SubmissionRelateToManyForUpdateInput {
  disconnect: [SubmissionWhereUniqueInput!]
  set: [SubmissionWhereUniqueInput!]
  create: [SubmissionCreateInput!]
  connect: [SubmissionWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  username: String
  email: String
  password: String
  accountCreated: DateTime
  isOver18: Boolean
  pronouns: String
  eventsAttended: String
  discord: String
  twitter: String
  submissions: SubmissionRelateToManyForCreateInput
  roleRunner: Boolean
  roleTech: Boolean
  roleRunnerManagement: Boolean
  roleAdmin: Boolean
}

input SubmissionRelateToManyForCreateInput {
  create: [SubmissionCreateInput!]
  connect: [SubmissionWhereUniqueInput!]
}

type Submission {
  id: ID!
  user: User
  created: DateTime
  game: String
  category: String
  platform: String
  estimate: String
  ageRating: SubmissionAgeRatingType
  donationIncentive: String
  race: SubmissionRaceType
  racer: String
  coop: Boolean
  video: String
  status: SubmissionStatusType
  event: Event
}

enum SubmissionAgeRatingType {
  m_or_lower
  ma15
  ra18
}

enum SubmissionRaceType {
  no
  solo
  only
}

enum SubmissionStatusType {
  submitted
  accepted
  backup
}

input SubmissionWhereUniqueInput {
  id: ID
}

input SubmissionWhereInput {
  AND: [SubmissionWhereInput!]
  OR: [SubmissionWhereInput!]
  NOT: [SubmissionWhereInput!]
  id: IDFilter
  user: UserWhereInput
  created: DateTimeNullableFilter
  game: StringFilter
  category: StringFilter
  platform: StringFilter
  estimate: StringFilter
  ageRating: SubmissionAgeRatingTypeNullableFilter
  donationIncentive: StringFilter
  race: SubmissionRaceTypeNullableFilter
  racer: StringFilter
  coop: BooleanFilter
  video: StringFilter
  status: SubmissionStatusTypeNullableFilter
  event: EventWhereInput
}

input SubmissionAgeRatingTypeNullableFilter {
  equals: SubmissionAgeRatingType
  in: [SubmissionAgeRatingType!]
  notIn: [SubmissionAgeRatingType!]
  not: SubmissionAgeRatingTypeNullableFilter
}

input SubmissionRaceTypeNullableFilter {
  equals: SubmissionRaceType
  in: [SubmissionRaceType!]
  notIn: [SubmissionRaceType!]
  not: SubmissionRaceTypeNullableFilter
}

input SubmissionStatusTypeNullableFilter {
  equals: SubmissionStatusType
  in: [SubmissionStatusType!]
  notIn: [SubmissionStatusType!]
  not: SubmissionStatusTypeNullableFilter
}

input SubmissionOrderByInput {
  id: OrderDirection
  created: OrderDirection
  game: OrderDirection
  category: OrderDirection
  platform: OrderDirection
  estimate: OrderDirection
  ageRating: OrderDirection
  donationIncentive: OrderDirection
  race: OrderDirection
  racer: OrderDirection
  coop: OrderDirection
  video: OrderDirection
  status: OrderDirection
}

input SubmissionUpdateInput {
  user: UserRelateToOneForUpdateInput
  created: DateTime
  game: String
  category: String
  platform: String
  estimate: String
  ageRating: SubmissionAgeRatingType
  donationIncentive: String
  race: SubmissionRaceType
  racer: String
  coop: Boolean
  video: String
  status: SubmissionStatusType
  event: EventRelateToOneForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input EventRelateToOneForUpdateInput {
  create: EventCreateInput
  connect: EventWhereUniqueInput
  disconnect: Boolean
}

input SubmissionUpdateArgs {
  where: SubmissionWhereUniqueInput!
  data: SubmissionUpdateInput!
}

input SubmissionCreateInput {
  user: UserRelateToOneForCreateInput
  created: DateTime
  game: String
  category: String
  platform: String
  estimate: String
  ageRating: SubmissionAgeRatingType
  donationIncentive: String
  race: SubmissionRaceType
  racer: String
  coop: Boolean
  video: String
  status: SubmissionStatusType
  event: EventRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input EventRelateToOneForCreateInput {
  create: EventCreateInput
  connect: EventWhereUniqueInput
}

type Event {
  id: ID!
  name: String
  shortname: String
  raised: Float
  submissions(
    where: SubmissionWhereInput! = {}
    orderBy: [SubmissionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Submission!]
  submissionsCount(where: SubmissionWhereInput! = {}): Int
  acceptingSubmissions: Boolean
}

input EventWhereUniqueInput {
  id: ID
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
  id: IDFilter
  name: StringFilter
  shortname: StringFilter
  raised: FloatNullableFilter
  submissions: SubmissionManyRelationFilter
  acceptingSubmissions: BooleanFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input EventOrderByInput {
  id: OrderDirection
  name: OrderDirection
  shortname: OrderDirection
  raised: OrderDirection
  acceptingSubmissions: OrderDirection
}

input EventUpdateInput {
  name: String
  shortname: String
  raised: Float
  submissions: SubmissionRelateToManyForUpdateInput
  acceptingSubmissions: Boolean
}

input EventUpdateArgs {
  where: EventWhereUniqueInput!
  data: EventUpdateInput!
}

input EventCreateInput {
  name: String
  shortname: String
  raised: Float
  submissions: SubmissionRelateToManyForCreateInput
  acceptingSubmissions: Boolean
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createSubmission(data: SubmissionCreateInput!): Submission
  createSubmissions(data: [SubmissionCreateInput!]!): [Submission]
  updateSubmission(
    where: SubmissionWhereUniqueInput!
    data: SubmissionUpdateInput!
  ): Submission
  updateSubmissions(data: [SubmissionUpdateArgs!]!): [Submission]
  deleteSubmission(where: SubmissionWhereUniqueInput!): Submission
  deleteSubmissions(where: [SubmissionWhereUniqueInput!]!): [Submission]
  createEvent(data: EventCreateInput!): Event
  createEvents(data: [EventCreateInput!]!): [Event]
  updateEvent(where: EventWhereUniqueInput!, data: EventUpdateInput!): Event
  updateEvents(data: [EventUpdateArgs!]!): [Event]
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteEvents(where: [EventWhereUniqueInput!]!): [Event]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  username: String
  email: String
  password: String
}

type Query {
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  submissions(
    where: SubmissionWhereInput! = {}
    orderBy: [SubmissionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Submission!]
  submission(where: SubmissionWhereUniqueInput!): Submission
  submissionsCount(where: SubmissionWhereInput! = {}): Int
  events(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  event(where: EventWhereUniqueInput!): Event
  eventsCount(where: EventWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}

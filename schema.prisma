// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource sqlite {
  url      = env("DATABASE_URL")
  provider = "sqlite"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model Post {
  id          String    @id @default(cuid())
  title       String    @default("")
  slug        String    @unique @default("")
  author      User[]    @relation("Post_author")
  published   Boolean   @default(false)
  publishDate DateTime?
  editedDate  DateTime?
  role        String?
  content     String    @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
}

model User {
  id               String       @id @default(cuid())
  name             String       @default("")
  username         String       @default("")
  email            String       @unique @default("")
  password         String
  accountCreated   DateTime?    @default(now())
  dateOfBirth      DateTime
  pronouns         String       @default("")
  socials          Social?      @relation("Social_user")
  submissions      Submission[] @relation("Submission_user")
  role             Role[]       @relation("Role_users")
  from_Post_author Post[]       @relation("Post_author")
}

model Submission {
  id                String    @id @default(cuid())
  user              User?     @relation("Submission_user", fields: [userId], references: [id])
  userId            String?   @map("user")
  created           DateTime? @default(now())
  game              String    @default("")
  category          String    @default("")
  platform          String    @default("")
  estimate          String    @default("")
  ageRating         String?   @default("m_or_lower")
  donationIncentive String    @default("")
  race              String?   @default("no")
  racer             String    @default("")
  coop              Boolean   @default(false)
  video             String    @default("")
  status            String?   @default("submitted")
  event             Event?    @relation("Submission_event", fields: [eventId], references: [id])
  eventId           String?   @map("event")

  @@index([userId])
  @@index([eventId])
}

model Event {
  id                   String       @id @default(cuid())
  name                 String       @default("")
  shortname            String       @default("")
  raised               Float?
  submissions          Submission[] @relation("Submission_event")
  acceptingSubmissions Boolean      @default(false)
}

model Role {
  id                String  @id @default(cuid())
  name              String  @default("")
  admin             Boolean @default(false)
  canManageContent  Boolean @default(false)
  canManageUsers    Boolean @default(false)
  canReadTech       Boolean @default(false)
  canReadRunnerInfo Boolean @default(false)
  canReadRunnerMgmt Boolean @default(false)
  users             User[]  @relation("Role_users")
}

model Social {
  id      String  @id @default(cuid())
  discord String  @default("")
  twitter String  @default("")
  user    User?   @relation("Social_user", fields: [userId], references: [id])
  userId  String? @unique @map("user")
}